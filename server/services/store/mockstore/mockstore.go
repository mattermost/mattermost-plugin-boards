// Code generated by MockGen. DO NOT EDIT.
// Source: server/services/store/store.go

// Package mockstore is a generated GoMock package.
package mockstore

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-plugin-boards/server/model"
	model0 "github.com/mattermost/mattermost/server/public/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUpdateCategoryBoard mocks base method.
func (m *MockStore) AddUpdateCategoryBoard(userID, categoryID string, boardIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpdateCategoryBoard", userID, categoryID, boardIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUpdateCategoryBoard indicates an expected call of AddUpdateCategoryBoard.
func (mr *MockStoreMockRecorder) AddUpdateCategoryBoard(userID, categoryID, boardIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpdateCategoryBoard", reflect.TypeOf((*MockStore)(nil).AddUpdateCategoryBoard), userID, categoryID, boardIDs)
}

// CanSeeUser mocks base method.
func (m *MockStore) CanSeeUser(seerID, seenID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSeeUser", seerID, seenID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSeeUser indicates an expected call of CanSeeUser.
func (mr *MockStoreMockRecorder) CanSeeUser(seerID, seenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSeeUser", reflect.TypeOf((*MockStore)(nil).CanSeeUser), seerID, seenID)
}

// CreateBoardsAndBlocks mocks base method.
func (m *MockStore) CreateBoardsAndBlocks(bab *model.BoardsAndBlocks, userID string) (*model.BoardsAndBlocks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoardsAndBlocks", bab, userID)
	ret0, _ := ret[0].(*model.BoardsAndBlocks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoardsAndBlocks indicates an expected call of CreateBoardsAndBlocks.
func (mr *MockStoreMockRecorder) CreateBoardsAndBlocks(bab, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoardsAndBlocks", reflect.TypeOf((*MockStore)(nil).CreateBoardsAndBlocks), bab, userID)
}

// CreateBoardsAndBlocksWithAdmin mocks base method.
func (m *MockStore) CreateBoardsAndBlocksWithAdmin(bab *model.BoardsAndBlocks, userID string) (*model.BoardsAndBlocks, []*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoardsAndBlocksWithAdmin", bab, userID)
	ret0, _ := ret[0].(*model.BoardsAndBlocks)
	ret1, _ := ret[1].([]*model.BoardMember)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBoardsAndBlocksWithAdmin indicates an expected call of CreateBoardsAndBlocksWithAdmin.
func (mr *MockStoreMockRecorder) CreateBoardsAndBlocksWithAdmin(bab, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoardsAndBlocksWithAdmin", reflect.TypeOf((*MockStore)(nil).CreateBoardsAndBlocksWithAdmin), bab, userID)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(category model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), category)
}

// CreateSubscription mocks base method.
func (m *MockStore) CreateSubscription(sub *model.Subscription) (*model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", sub)
	ret0, _ := ret[0].(*model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockStoreMockRecorder) CreateSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockStore)(nil).CreateSubscription), sub)
}

// DBType mocks base method.
func (m *MockStore) DBType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBType")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBType indicates an expected call of DBType.
func (mr *MockStoreMockRecorder) DBType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBType", reflect.TypeOf((*MockStore)(nil).DBType))
}

// DBVersion mocks base method.
func (m *MockStore) DBVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBVersion indicates an expected call of DBVersion.
func (mr *MockStoreMockRecorder) DBVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBVersion", reflect.TypeOf((*MockStore)(nil).DBVersion))
}

// DeleteBlock mocks base method.
func (m *MockStore) DeleteBlock(blockID, modifiedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlock", blockID, modifiedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlock indicates an expected call of DeleteBlock.
func (mr *MockStoreMockRecorder) DeleteBlock(blockID, modifiedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockStore)(nil).DeleteBlock), blockID, modifiedBy)
}

// DeleteBlockRecord mocks base method.
func (m *MockStore) DeleteBlockRecord(blockID, modifiedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlockRecord", blockID, modifiedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlockRecord indicates an expected call of DeleteBlockRecord.
func (mr *MockStoreMockRecorder) DeleteBlockRecord(blockID, modifiedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlockRecord", reflect.TypeOf((*MockStore)(nil).DeleteBlockRecord), blockID, modifiedBy)
}

// DeleteBoard mocks base method.
func (m *MockStore) DeleteBoard(boardID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", boardID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard.
func (mr *MockStoreMockRecorder) DeleteBoard(boardID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockStore)(nil).DeleteBoard), boardID, userID)
}

// DeleteBoardRecord mocks base method.
func (m *MockStore) DeleteBoardRecord(boardID, modifiedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardRecord", boardID, modifiedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardRecord indicates an expected call of DeleteBoardRecord.
func (mr *MockStoreMockRecorder) DeleteBoardRecord(boardID, modifiedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardRecord", reflect.TypeOf((*MockStore)(nil).DeleteBoardRecord), boardID, modifiedBy)
}

// DeleteBoardsAndBlocks mocks base method.
func (m *MockStore) DeleteBoardsAndBlocks(dbab *model.DeleteBoardsAndBlocks, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardsAndBlocks", dbab, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardsAndBlocks indicates an expected call of DeleteBoardsAndBlocks.
func (mr *MockStoreMockRecorder) DeleteBoardsAndBlocks(dbab, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardsAndBlocks", reflect.TypeOf((*MockStore)(nil).DeleteBoardsAndBlocks), dbab, userID)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(categoryID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", categoryID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(categoryID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), categoryID, userID, teamID)
}

// DeleteMember mocks base method.
func (m *MockStore) DeleteMember(boardID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", boardID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockStoreMockRecorder) DeleteMember(boardID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockStore)(nil).DeleteMember), boardID, userID)
}

// DeleteNotificationHint mocks base method.
func (m *MockStore) DeleteNotificationHint(blockID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationHint", blockID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotificationHint indicates an expected call of DeleteNotificationHint.
func (mr *MockStoreMockRecorder) DeleteNotificationHint(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationHint", reflect.TypeOf((*MockStore)(nil).DeleteNotificationHint), blockID)
}

// DeleteSubscription mocks base method.
func (m *MockStore) DeleteSubscription(blockID, subscriberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", blockID, subscriberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockStoreMockRecorder) DeleteSubscription(blockID, subscriberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockStore)(nil).DeleteSubscription), blockID, subscriberID)
}

// DuplicateBlock mocks base method.
func (m *MockStore) DuplicateBlock(boardID, blockID, userID string, asTemplate bool) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateBlock", boardID, blockID, userID, asTemplate)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateBlock indicates an expected call of DuplicateBlock.
func (mr *MockStoreMockRecorder) DuplicateBlock(boardID, blockID, userID, asTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateBlock", reflect.TypeOf((*MockStore)(nil).DuplicateBlock), boardID, blockID, userID, asTemplate)
}

// DuplicateBoard mocks base method.
func (m *MockStore) DuplicateBoard(boardID, userID, toTeam string, asTemplate bool) (*model.BoardsAndBlocks, []*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateBoard", boardID, userID, toTeam, asTemplate)
	ret0, _ := ret[0].(*model.BoardsAndBlocks)
	ret1, _ := ret[1].([]*model.BoardMember)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DuplicateBoard indicates an expected call of DuplicateBoard.
func (mr *MockStoreMockRecorder) DuplicateBoard(boardID, userID, toTeam, asTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateBoard", reflect.TypeOf((*MockStore)(nil).DuplicateBoard), boardID, userID, toTeam, asTemplate)
}

// GetActiveUserCount mocks base method.
func (m *MockStore) GetActiveUserCount(updatedSecondsAgo int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUserCount", updatedSecondsAgo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUserCount indicates an expected call of GetActiveUserCount.
func (mr *MockStoreMockRecorder) GetActiveUserCount(updatedSecondsAgo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUserCount", reflect.TypeOf((*MockStore)(nil).GetActiveUserCount), updatedSecondsAgo)
}

// GetAllTeams mocks base method.
func (m *MockStore) GetAllTeams() ([]*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams")
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockStoreMockRecorder) GetAllTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockStore)(nil).GetAllTeams))
}

// GetBlock mocks base method.
func (m *MockStore) GetBlock(blockID string) (*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", blockID)
	ret0, _ := ret[0].(*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockStoreMockRecorder) GetBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockStore)(nil).GetBlock), blockID)
}

// GetBlockCountsByType mocks base method.
func (m *MockStore) GetBlockCountsByType() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockCountsByType")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockCountsByType indicates an expected call of GetBlockCountsByType.
func (mr *MockStoreMockRecorder) GetBlockCountsByType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockCountsByType", reflect.TypeOf((*MockStore)(nil).GetBlockCountsByType))
}

// GetBlockHistory mocks base method.
func (m *MockStore) GetBlockHistory(blockID string, opts model.QueryBlockHistoryOptions) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHistory", blockID, opts)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHistory indicates an expected call of GetBlockHistory.
func (mr *MockStoreMockRecorder) GetBlockHistory(blockID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHistory", reflect.TypeOf((*MockStore)(nil).GetBlockHistory), blockID, opts)
}

// GetBlockHistoryDescendants mocks base method.
func (m *MockStore) GetBlockHistoryDescendants(boardID string, opts model.QueryBlockHistoryOptions) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHistoryDescendants", boardID, opts)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHistoryDescendants indicates an expected call of GetBlockHistoryDescendants.
func (mr *MockStoreMockRecorder) GetBlockHistoryDescendants(boardID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHistoryDescendants", reflect.TypeOf((*MockStore)(nil).GetBlockHistoryDescendants), boardID, opts)
}

// GetBlockHistoryNewestChildren mocks base method.
func (m *MockStore) GetBlockHistoryNewestChildren(parentID string, opts model.QueryBlockHistoryChildOptions) ([]*model.Block, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHistoryNewestChildren", parentID, opts)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlockHistoryNewestChildren indicates an expected call of GetBlockHistoryNewestChildren.
func (mr *MockStoreMockRecorder) GetBlockHistoryNewestChildren(parentID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHistoryNewestChildren", reflect.TypeOf((*MockStore)(nil).GetBlockHistoryNewestChildren), parentID, opts)
}

// GetBlocks mocks base method.
func (m *MockStore) GetBlocks(opts model.QueryBlocksOptions) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", opts)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockStoreMockRecorder) GetBlocks(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockStore)(nil).GetBlocks), opts)
}

// GetBlocksByIDs mocks base method.
func (m *MockStore) GetBlocksByIDs(ids []string) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksByIDs", ids)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksByIDs indicates an expected call of GetBlocksByIDs.
func (mr *MockStoreMockRecorder) GetBlocksByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksByIDs", reflect.TypeOf((*MockStore)(nil).GetBlocksByIDs), ids)
}

// GetBlocksComplianceHistory mocks base method.
func (m *MockStore) GetBlocksComplianceHistory(opts model.QueryBlocksComplianceHistoryOptions) ([]*model.BlockHistory, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksComplianceHistory", opts)
	ret0, _ := ret[0].([]*model.BlockHistory)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlocksComplianceHistory indicates an expected call of GetBlocksComplianceHistory.
func (mr *MockStoreMockRecorder) GetBlocksComplianceHistory(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksComplianceHistory", reflect.TypeOf((*MockStore)(nil).GetBlocksComplianceHistory), opts)
}

// GetBlocksForBoard mocks base method.
func (m *MockStore) GetBlocksForBoard(boardID string) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksForBoard", boardID)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksForBoard indicates an expected call of GetBlocksForBoard.
func (mr *MockStoreMockRecorder) GetBlocksForBoard(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksForBoard", reflect.TypeOf((*MockStore)(nil).GetBlocksForBoard), boardID)
}

// GetBlocksWithParent mocks base method.
func (m *MockStore) GetBlocksWithParent(boardID, parentID string) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksWithParent", boardID, parentID)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksWithParent indicates an expected call of GetBlocksWithParent.
func (mr *MockStoreMockRecorder) GetBlocksWithParent(boardID, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksWithParent", reflect.TypeOf((*MockStore)(nil).GetBlocksWithParent), boardID, parentID)
}

// GetBlocksWithParentAndType mocks base method.
func (m *MockStore) GetBlocksWithParentAndType(boardID, parentID, blockType string) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksWithParentAndType", boardID, parentID, blockType)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksWithParentAndType indicates an expected call of GetBlocksWithParentAndType.
func (mr *MockStoreMockRecorder) GetBlocksWithParentAndType(boardID, parentID, blockType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksWithParentAndType", reflect.TypeOf((*MockStore)(nil).GetBlocksWithParentAndType), boardID, parentID, blockType)
}

// GetBlocksWithType mocks base method.
func (m *MockStore) GetBlocksWithType(boardID, blockType string) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksWithType", boardID, blockType)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksWithType indicates an expected call of GetBlocksWithType.
func (mr *MockStoreMockRecorder) GetBlocksWithType(boardID, blockType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksWithType", reflect.TypeOf((*MockStore)(nil).GetBlocksWithType), boardID, blockType)
}

// GetBoard mocks base method.
func (m *MockStore) GetBoard(id string) (*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", id)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard.
func (mr *MockStoreMockRecorder) GetBoard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockStore)(nil).GetBoard), id)
}

// GetBoardAndCard mocks base method.
func (m *MockStore) GetBoardAndCard(block *model.Block) (*model.Board, *model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardAndCard", block)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(*model.Block)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoardAndCard indicates an expected call of GetBoardAndCard.
func (mr *MockStoreMockRecorder) GetBoardAndCard(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardAndCard", reflect.TypeOf((*MockStore)(nil).GetBoardAndCard), block)
}

// GetBoardAndCardByID mocks base method.
func (m *MockStore) GetBoardAndCardByID(blockID string) (*model.Board, *model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardAndCardByID", blockID)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(*model.Block)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoardAndCardByID indicates an expected call of GetBoardAndCardByID.
func (mr *MockStoreMockRecorder) GetBoardAndCardByID(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardAndCardByID", reflect.TypeOf((*MockStore)(nil).GetBoardAndCardByID), blockID)
}

// GetBoardCount mocks base method.
func (m *MockStore) GetBoardCount(includeDeleted bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardCount", includeDeleted)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardCount indicates an expected call of GetBoardCount.
func (mr *MockStoreMockRecorder) GetBoardCount(includeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardCount", reflect.TypeOf((*MockStore)(nil).GetBoardCount), includeDeleted)
}

// GetBoardHistory mocks base method.
func (m *MockStore) GetBoardHistory(boardID string, opts model.QueryBoardHistoryOptions) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardHistory", boardID, opts)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardHistory indicates an expected call of GetBoardHistory.
func (mr *MockStoreMockRecorder) GetBoardHistory(boardID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardHistory", reflect.TypeOf((*MockStore)(nil).GetBoardHistory), boardID, opts)
}

// GetBoardMemberHistory mocks base method.
func (m *MockStore) GetBoardMemberHistory(boardID, userID string, limit uint64) ([]*model.BoardMemberHistoryEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardMemberHistory", boardID, userID, limit)
	ret0, _ := ret[0].([]*model.BoardMemberHistoryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardMemberHistory indicates an expected call of GetBoardMemberHistory.
func (mr *MockStoreMockRecorder) GetBoardMemberHistory(boardID, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardMemberHistory", reflect.TypeOf((*MockStore)(nil).GetBoardMemberHistory), boardID, userID, limit)
}

// GetBoardsComplianceHistory mocks base method.
func (m *MockStore) GetBoardsComplianceHistory(opts model.QueryBoardsComplianceHistoryOptions) ([]*model.BoardHistory, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsComplianceHistory", opts)
	ret0, _ := ret[0].([]*model.BoardHistory)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoardsComplianceHistory indicates an expected call of GetBoardsComplianceHistory.
func (mr *MockStoreMockRecorder) GetBoardsComplianceHistory(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsComplianceHistory", reflect.TypeOf((*MockStore)(nil).GetBoardsComplianceHistory), opts)
}

// GetBoardsForCompliance mocks base method.
func (m *MockStore) GetBoardsForCompliance(opts model.QueryBoardsForComplianceOptions) ([]*model.Board, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsForCompliance", opts)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoardsForCompliance indicates an expected call of GetBoardsForCompliance.
func (mr *MockStoreMockRecorder) GetBoardsForCompliance(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsForCompliance", reflect.TypeOf((*MockStore)(nil).GetBoardsForCompliance), opts)
}

// GetBoardsForUserAndTeam mocks base method.
func (m *MockStore) GetBoardsForUserAndTeam(userID, teamID string, includePublicBoards bool) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsForUserAndTeam", userID, teamID, includePublicBoards)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsForUserAndTeam indicates an expected call of GetBoardsForUserAndTeam.
func (mr *MockStoreMockRecorder) GetBoardsForUserAndTeam(userID, teamID, includePublicBoards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsForUserAndTeam", reflect.TypeOf((*MockStore)(nil).GetBoardsForUserAndTeam), userID, teamID, includePublicBoards)
}

// GetBoardsInTeamByIds mocks base method.
func (m *MockStore) GetBoardsInTeamByIds(boardIDs []string, teamID string) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsInTeamByIds", boardIDs, teamID)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsInTeamByIds indicates an expected call of GetBoardsInTeamByIds.
func (mr *MockStoreMockRecorder) GetBoardsInTeamByIds(boardIDs, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsInTeamByIds", reflect.TypeOf((*MockStore)(nil).GetBoardsInTeamByIds), boardIDs, teamID)
}

// GetCardLimitTimestamp mocks base method.
func (m *MockStore) GetCardLimitTimestamp() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardLimitTimestamp")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardLimitTimestamp indicates an expected call of GetCardLimitTimestamp.
func (mr *MockStoreMockRecorder) GetCardLimitTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardLimitTimestamp", reflect.TypeOf((*MockStore)(nil).GetCardLimitTimestamp))
}

// GetCardsCount mocks base method.
func (m *MockStore) GetCardsCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardsCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardsCount indicates an expected call of GetCardsCount.
func (mr *MockStoreMockRecorder) GetCardsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsCount", reflect.TypeOf((*MockStore)(nil).GetCardsCount))
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(id string) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), id)
}

// GetChannel mocks base method.
func (m *MockStore) GetChannel(teamID, channelID string) (*model0.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", teamID, channelID)
	ret0, _ := ret[0].(*model0.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockStoreMockRecorder) GetChannel(teamID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockStore)(nil).GetChannel), teamID, channelID)
}

// GetFileInfo mocks base method.
func (m *MockStore) GetFileInfo(id string) (*model0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", id)
	ret0, _ := ret[0].(*model0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockStoreMockRecorder) GetFileInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockStore)(nil).GetFileInfo), id)
}

// GetLicense mocks base method.
func (m *MockStore) GetLicense() *model0.License {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense")
	ret0, _ := ret[0].(*model0.License)
	return ret0
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockStoreMockRecorder) GetLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockStore)(nil).GetLicense))
}

// GetMemberForBoard mocks base method.
func (m *MockStore) GetMemberForBoard(boardID, userID string) (*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberForBoard", boardID, userID)
	ret0, _ := ret[0].(*model.BoardMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberForBoard indicates an expected call of GetMemberForBoard.
func (mr *MockStoreMockRecorder) GetMemberForBoard(boardID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberForBoard", reflect.TypeOf((*MockStore)(nil).GetMemberForBoard), boardID, userID)
}

// GetMembersForBoard mocks base method.
func (m *MockStore) GetMembersForBoard(boardID string) ([]*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersForBoard", boardID)
	ret0, _ := ret[0].([]*model.BoardMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersForBoard indicates an expected call of GetMembersForBoard.
func (mr *MockStoreMockRecorder) GetMembersForBoard(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersForBoard", reflect.TypeOf((*MockStore)(nil).GetMembersForBoard), boardID)
}

// GetMembersForUser mocks base method.
func (m *MockStore) GetMembersForUser(userID string) ([]*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersForUser", userID)
	ret0, _ := ret[0].([]*model.BoardMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersForUser indicates an expected call of GetMembersForUser.
func (mr *MockStoreMockRecorder) GetMembersForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersForUser", reflect.TypeOf((*MockStore)(nil).GetMembersForUser), userID)
}

// GetNextNotificationHint mocks base method.
func (m *MockStore) GetNextNotificationHint(remove bool) (*model.NotificationHint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextNotificationHint", remove)
	ret0, _ := ret[0].(*model.NotificationHint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextNotificationHint indicates an expected call of GetNextNotificationHint.
func (mr *MockStoreMockRecorder) GetNextNotificationHint(remove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextNotificationHint", reflect.TypeOf((*MockStore)(nil).GetNextNotificationHint), remove)
}

// GetNotificationHint mocks base method.
func (m *MockStore) GetNotificationHint(blockID string) (*model.NotificationHint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationHint", blockID)
	ret0, _ := ret[0].(*model.NotificationHint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationHint indicates an expected call of GetNotificationHint.
func (mr *MockStoreMockRecorder) GetNotificationHint(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationHint", reflect.TypeOf((*MockStore)(nil).GetNotificationHint), blockID)
}

// GetRegisteredUserCount mocks base method.
func (m *MockStore) GetRegisteredUserCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredUserCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredUserCount indicates an expected call of GetRegisteredUserCount.
func (mr *MockStoreMockRecorder) GetRegisteredUserCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredUserCount", reflect.TypeOf((*MockStore)(nil).GetRegisteredUserCount))
}

// GetSharing mocks base method.
func (m *MockStore) GetSharing(rootID string) (*model.Sharing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharing", rootID)
	ret0, _ := ret[0].(*model.Sharing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharing indicates an expected call of GetSharing.
func (mr *MockStoreMockRecorder) GetSharing(rootID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharing", reflect.TypeOf((*MockStore)(nil).GetSharing), rootID)
}

// GetSubTree2 mocks base method.
func (m *MockStore) GetSubTree2(boardID, blockID string, opts model.QuerySubtreeOptions) ([]*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubTree2", boardID, blockID, opts)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubTree2 indicates an expected call of GetSubTree2.
func (mr *MockStoreMockRecorder) GetSubTree2(boardID, blockID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubTree2", reflect.TypeOf((*MockStore)(nil).GetSubTree2), boardID, blockID, opts)
}

// GetSubscribersCountForBlock mocks base method.
func (m *MockStore) GetSubscribersCountForBlock(blockID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersCountForBlock", blockID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersCountForBlock indicates an expected call of GetSubscribersCountForBlock.
func (mr *MockStoreMockRecorder) GetSubscribersCountForBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersCountForBlock", reflect.TypeOf((*MockStore)(nil).GetSubscribersCountForBlock), blockID)
}

// GetSubscribersForBlock mocks base method.
func (m *MockStore) GetSubscribersForBlock(blockID string) ([]*model.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersForBlock", blockID)
	ret0, _ := ret[0].([]*model.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersForBlock indicates an expected call of GetSubscribersForBlock.
func (mr *MockStoreMockRecorder) GetSubscribersForBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersForBlock", reflect.TypeOf((*MockStore)(nil).GetSubscribersForBlock), blockID)
}

// GetSubscription mocks base method.
func (m *MockStore) GetSubscription(blockID, subscriberID string) (*model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", blockID, subscriberID)
	ret0, _ := ret[0].(*model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockStoreMockRecorder) GetSubscription(blockID, subscriberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockStore)(nil).GetSubscription), blockID, subscriberID)
}

// GetSubscriptions mocks base method.
func (m *MockStore) GetSubscriptions(subscriberID string) ([]*model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", subscriberID)
	ret0, _ := ret[0].([]*model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockStoreMockRecorder) GetSubscriptions(subscriberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockStore)(nil).GetSubscriptions), subscriberID)
}

// GetSystemSetting mocks base method.
func (m *MockStore) GetSystemSetting(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSetting", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSetting indicates an expected call of GetSystemSetting.
func (mr *MockStoreMockRecorder) GetSystemSetting(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSetting", reflect.TypeOf((*MockStore)(nil).GetSystemSetting), key)
}

// GetSystemSettings mocks base method.
func (m *MockStore) GetSystemSettings() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSettings")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSettings indicates an expected call of GetSystemSettings.
func (mr *MockStoreMockRecorder) GetSystemSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSettings", reflect.TypeOf((*MockStore)(nil).GetSystemSettings))
}

// GetTeam mocks base method.
func (m *MockStore) GetTeam(ID string) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ID)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockStoreMockRecorder) GetTeam(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockStore)(nil).GetTeam), ID)
}

// GetTeamCount mocks base method.
func (m *MockStore) GetTeamCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamCount indicates an expected call of GetTeamCount.
func (mr *MockStoreMockRecorder) GetTeamCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamCount", reflect.TypeOf((*MockStore)(nil).GetTeamCount))
}

// GetTeamsForUser mocks base method.
func (m *MockStore) GetTeamsForUser(userID string) ([]*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsForUser", userID)
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsForUser indicates an expected call of GetTeamsForUser.
func (mr *MockStoreMockRecorder) GetTeamsForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsForUser", reflect.TypeOf((*MockStore)(nil).GetTeamsForUser), userID)
}

// GetTemplateBoards mocks base method.
func (m *MockStore) GetTemplateBoards(teamID, userID string) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateBoards", teamID, userID)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateBoards indicates an expected call of GetTemplateBoards.
func (mr *MockStoreMockRecorder) GetTemplateBoards(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateBoards", reflect.TypeOf((*MockStore)(nil).GetTemplateBoards), teamID, userID)
}

// GetUsedCardsCount mocks base method.
func (m *MockStore) GetUsedCardsCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedCardsCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsedCardsCount indicates an expected call of GetUsedCardsCount.
func (mr *MockStoreMockRecorder) GetUsedCardsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedCardsCount", reflect.TypeOf((*MockStore)(nil).GetUsedCardsCount))
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), username)
}

// GetUserCategories mocks base method.
func (m *MockStore) GetUserCategories(userID, teamID string) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCategories", userID, teamID)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCategories indicates an expected call of GetUserCategories.
func (mr *MockStoreMockRecorder) GetUserCategories(userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCategories", reflect.TypeOf((*MockStore)(nil).GetUserCategories), userID, teamID)
}

// GetUserCategoryBoards mocks base method.
func (m *MockStore) GetUserCategoryBoards(userID, teamID string) ([]model.CategoryBoards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCategoryBoards", userID, teamID)
	ret0, _ := ret[0].([]model.CategoryBoards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCategoryBoards indicates an expected call of GetUserCategoryBoards.
func (mr *MockStoreMockRecorder) GetUserCategoryBoards(userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCategoryBoards", reflect.TypeOf((*MockStore)(nil).GetUserCategoryBoards), userID, teamID)
}

// GetUserPreferences mocks base method.
func (m *MockStore) GetUserPreferences(userID string) (model0.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPreferences", userID)
	ret0, _ := ret[0].(model0.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreferences indicates an expected call of GetUserPreferences.
func (mr *MockStoreMockRecorder) GetUserPreferences(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreferences", reflect.TypeOf((*MockStore)(nil).GetUserPreferences), userID)
}

// GetUserTimezone mocks base method.
func (m *MockStore) GetUserTimezone(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTimezone", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTimezone indicates an expected call of GetUserTimezone.
func (mr *MockStoreMockRecorder) GetUserTimezone(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTimezone", reflect.TypeOf((*MockStore)(nil).GetUserTimezone), userID)
}

// GetUsersByTeam mocks base method.
func (m *MockStore) GetUsersByTeam(teamID, asGuestID string, showEmail, showName bool) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByTeam", teamID, asGuestID, showEmail, showName)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByTeam indicates an expected call of GetUsersByTeam.
func (mr *MockStoreMockRecorder) GetUsersByTeam(teamID, asGuestID, showEmail, showName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByTeam", reflect.TypeOf((*MockStore)(nil).GetUsersByTeam), teamID, asGuestID, showEmail, showName)
}

// GetUsersList mocks base method.
func (m *MockStore) GetUsersList(userIDs []string, showEmail, showName bool) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersList", userIDs, showEmail, showName)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersList indicates an expected call of GetUsersList.
func (mr *MockStoreMockRecorder) GetUsersList(userIDs, showEmail, showName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersList", reflect.TypeOf((*MockStore)(nil).GetUsersList), userIDs, showEmail, showName)
}

// InsertBlock mocks base method.
func (m *MockStore) InsertBlock(block *model.Block, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", block, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock.
func (mr *MockStoreMockRecorder) InsertBlock(block, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockStore)(nil).InsertBlock), block, userID)
}

// InsertBlocks mocks base method.
func (m *MockStore) InsertBlocks(blocks []*model.Block, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlocks", blocks, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlocks indicates an expected call of InsertBlocks.
func (mr *MockStoreMockRecorder) InsertBlocks(blocks, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlocks", reflect.TypeOf((*MockStore)(nil).InsertBlocks), blocks, userID)
}

// InsertBoard mocks base method.
func (m *MockStore) InsertBoard(board *model.Board, userID string) (*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoard", board, userID)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBoard indicates an expected call of InsertBoard.
func (mr *MockStoreMockRecorder) InsertBoard(board, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoard", reflect.TypeOf((*MockStore)(nil).InsertBoard), board, userID)
}

// InsertBoardWithAdmin mocks base method.
func (m *MockStore) InsertBoardWithAdmin(board *model.Board, userID string) (*model.Board, *model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoardWithAdmin", board, userID)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(*model.BoardMember)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InsertBoardWithAdmin indicates an expected call of InsertBoardWithAdmin.
func (mr *MockStoreMockRecorder) InsertBoardWithAdmin(board, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoardWithAdmin", reflect.TypeOf((*MockStore)(nil).InsertBoardWithAdmin), board, userID)
}

// PatchBlock mocks base method.
func (m *MockStore) PatchBlock(blockID string, blockPatch *model.BlockPatch, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBlock", blockID, blockPatch, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchBlock indicates an expected call of PatchBlock.
func (mr *MockStoreMockRecorder) PatchBlock(blockID, blockPatch, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBlock", reflect.TypeOf((*MockStore)(nil).PatchBlock), blockID, blockPatch, userID)
}

// PatchBlocks mocks base method.
func (m *MockStore) PatchBlocks(blockPatches *model.BlockPatchBatch, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBlocks", blockPatches, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchBlocks indicates an expected call of PatchBlocks.
func (mr *MockStoreMockRecorder) PatchBlocks(blockPatches, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBlocks", reflect.TypeOf((*MockStore)(nil).PatchBlocks), blockPatches, userID)
}

// PatchBoard mocks base method.
func (m *MockStore) PatchBoard(boardID string, boardPatch *model.BoardPatch, userID string) (*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBoard", boardID, boardPatch, userID)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBoard indicates an expected call of PatchBoard.
func (mr *MockStoreMockRecorder) PatchBoard(boardID, boardPatch, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBoard", reflect.TypeOf((*MockStore)(nil).PatchBoard), boardID, boardPatch, userID)
}

// PatchBoardsAndBlocks mocks base method.
func (m *MockStore) PatchBoardsAndBlocks(pbab *model.PatchBoardsAndBlocks, userID string) (*model.BoardsAndBlocks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBoardsAndBlocks", pbab, userID)
	ret0, _ := ret[0].(*model.BoardsAndBlocks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBoardsAndBlocks indicates an expected call of PatchBoardsAndBlocks.
func (mr *MockStoreMockRecorder) PatchBoardsAndBlocks(pbab, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBoardsAndBlocks", reflect.TypeOf((*MockStore)(nil).PatchBoardsAndBlocks), pbab, userID)
}

// PatchUserPreferences mocks base method.
func (m *MockStore) PatchUserPreferences(userID string, patch model.UserPreferencesPatch) (model0.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchUserPreferences", userID, patch)
	ret0, _ := ret[0].(model0.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchUserPreferences indicates an expected call of PatchUserPreferences.
func (mr *MockStoreMockRecorder) PatchUserPreferences(userID, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUserPreferences", reflect.TypeOf((*MockStore)(nil).PatchUserPreferences), userID, patch)
}

// PostMessage mocks base method.
func (m *MockStore) PostMessage(message, postType, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", message, postType, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockStoreMockRecorder) PostMessage(message, postType, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockStore)(nil).PostMessage), message, postType, channelID)
}

// RemoveDefaultTemplates mocks base method.
func (m *MockStore) RemoveDefaultTemplates(boards []*model.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultTemplates", boards)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultTemplates indicates an expected call of RemoveDefaultTemplates.
func (mr *MockStoreMockRecorder) RemoveDefaultTemplates(boards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultTemplates", reflect.TypeOf((*MockStore)(nil).RemoveDefaultTemplates), boards)
}

// ReorderCategories mocks base method.
func (m *MockStore) ReorderCategories(userID, teamID string, newCategoryOrder []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderCategories", userID, teamID, newCategoryOrder)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReorderCategories indicates an expected call of ReorderCategories.
func (mr *MockStoreMockRecorder) ReorderCategories(userID, teamID, newCategoryOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderCategories", reflect.TypeOf((*MockStore)(nil).ReorderCategories), userID, teamID, newCategoryOrder)
}

// ReorderCategoryBoards mocks base method.
func (m *MockStore) ReorderCategoryBoards(categoryID string, newBoardsOrder []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderCategoryBoards", categoryID, newBoardsOrder)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReorderCategoryBoards indicates an expected call of ReorderCategoryBoards.
func (mr *MockStoreMockRecorder) ReorderCategoryBoards(categoryID, newBoardsOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderCategoryBoards", reflect.TypeOf((*MockStore)(nil).ReorderCategoryBoards), categoryID, newBoardsOrder)
}

// RestoreFiles mocks base method.
func (m *MockStore) RestoreFiles(fileIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFiles", fileIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreFiles indicates an expected call of RestoreFiles.
func (mr *MockStoreMockRecorder) RestoreFiles(fileIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFiles", reflect.TypeOf((*MockStore)(nil).RestoreFiles), fileIDs)
}

// RunDataRetention mocks base method.
func (m *MockStore) RunDataRetention(globalRetentionDate, batchSize int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunDataRetention", globalRetentionDate, batchSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDataRetention indicates an expected call of RunDataRetention.
func (mr *MockStoreMockRecorder) RunDataRetention(globalRetentionDate, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDataRetention", reflect.TypeOf((*MockStore)(nil).RunDataRetention), globalRetentionDate, batchSize)
}

// SaveFileInfo mocks base method.
func (m *MockStore) SaveFileInfo(fileInfo *model0.FileInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileInfo", fileInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileInfo indicates an expected call of SaveFileInfo.
func (mr *MockStoreMockRecorder) SaveFileInfo(fileInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileInfo", reflect.TypeOf((*MockStore)(nil).SaveFileInfo), fileInfo)
}

// SaveMember mocks base method.
func (m *MockStore) SaveMember(bm *model.BoardMember) (*model.BoardMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMember", bm)
	ret0, _ := ret[0].(*model.BoardMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMember indicates an expected call of SaveMember.
func (mr *MockStoreMockRecorder) SaveMember(bm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMember", reflect.TypeOf((*MockStore)(nil).SaveMember), bm)
}

// SearchBoardsForUser mocks base method.
func (m *MockStore) SearchBoardsForUser(term string, searchField model.BoardSearchField, userID string, includePublicBoards bool) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBoardsForUser", term, searchField, userID, includePublicBoards)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBoardsForUser indicates an expected call of SearchBoardsForUser.
func (mr *MockStoreMockRecorder) SearchBoardsForUser(term, searchField, userID, includePublicBoards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBoardsForUser", reflect.TypeOf((*MockStore)(nil).SearchBoardsForUser), term, searchField, userID, includePublicBoards)
}

// SearchBoardsForUserInTeam mocks base method.
func (m *MockStore) SearchBoardsForUserInTeam(teamID, term, userID string) ([]*model.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBoardsForUserInTeam", teamID, term, userID)
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBoardsForUserInTeam indicates an expected call of SearchBoardsForUserInTeam.
func (mr *MockStoreMockRecorder) SearchBoardsForUserInTeam(teamID, term, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBoardsForUserInTeam", reflect.TypeOf((*MockStore)(nil).SearchBoardsForUserInTeam), teamID, term, userID)
}

// SearchUserChannels mocks base method.
func (m *MockStore) SearchUserChannels(teamID, userID, query string) ([]*model0.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserChannels", teamID, userID, query)
	ret0, _ := ret[0].([]*model0.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserChannels indicates an expected call of SearchUserChannels.
func (mr *MockStoreMockRecorder) SearchUserChannels(teamID, userID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserChannels", reflect.TypeOf((*MockStore)(nil).SearchUserChannels), teamID, userID, query)
}

// SearchUsersByTeam mocks base method.
func (m *MockStore) SearchUsersByTeam(teamID, searchQuery, asGuestID string, excludeBots, showEmail, showName bool) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsersByTeam", teamID, searchQuery, asGuestID, excludeBots, showEmail, showName)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsersByTeam indicates an expected call of SearchUsersByTeam.
func (mr *MockStoreMockRecorder) SearchUsersByTeam(teamID, searchQuery, asGuestID, excludeBots, showEmail, showName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsersByTeam", reflect.TypeOf((*MockStore)(nil).SearchUsersByTeam), teamID, searchQuery, asGuestID, excludeBots, showEmail, showName)
}

// SendMessage mocks base method.
func (m *MockStore) SendMessage(message, postType string, receipts []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message, postType, receipts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockStoreMockRecorder) SendMessage(message, postType, receipts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockStore)(nil).SendMessage), message, postType, receipts)
}

// SetBoardVisibility mocks base method.
func (m *MockStore) SetBoardVisibility(userID, categoryID, boardID string, visible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBoardVisibility", userID, categoryID, boardID, visible)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBoardVisibility indicates an expected call of SetBoardVisibility.
func (mr *MockStoreMockRecorder) SetBoardVisibility(userID, categoryID, boardID, visible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBoardVisibility", reflect.TypeOf((*MockStore)(nil).SetBoardVisibility), userID, categoryID, boardID, visible)
}

// SetSystemSetting mocks base method.
func (m *MockStore) SetSystemSetting(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSystemSetting", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSystemSetting indicates an expected call of SetSystemSetting.
func (mr *MockStoreMockRecorder) SetSystemSetting(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystemSetting", reflect.TypeOf((*MockStore)(nil).SetSystemSetting), key, value)
}

// Shutdown mocks base method.
func (m *MockStore) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStore)(nil).Shutdown))
}

// UndeleteBlock mocks base method.
func (m *MockStore) UndeleteBlock(blockID, modifiedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteBlock", blockID, modifiedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteBlock indicates an expected call of UndeleteBlock.
func (mr *MockStoreMockRecorder) UndeleteBlock(blockID, modifiedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteBlock", reflect.TypeOf((*MockStore)(nil).UndeleteBlock), blockID, modifiedBy)
}

// UndeleteBoard mocks base method.
func (m *MockStore) UndeleteBoard(boardID, modifiedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteBoard", boardID, modifiedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteBoard indicates an expected call of UndeleteBoard.
func (mr *MockStoreMockRecorder) UndeleteBoard(boardID, modifiedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteBoard", reflect.TypeOf((*MockStore)(nil).UndeleteBoard), boardID, modifiedBy)
}

// UpdateCardLimitTimestamp mocks base method.
func (m *MockStore) UpdateCardLimitTimestamp(cardLimit int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCardLimitTimestamp", cardLimit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCardLimitTimestamp indicates an expected call of UpdateCardLimitTimestamp.
func (mr *MockStoreMockRecorder) UpdateCardLimitTimestamp(cardLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCardLimitTimestamp", reflect.TypeOf((*MockStore)(nil).UpdateCardLimitTimestamp), cardLimit)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(category model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), category)
}

// UpdateSubscribersNotifiedAt mocks base method.
func (m *MockStore) UpdateSubscribersNotifiedAt(blockID string, notifiedAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscribersNotifiedAt", blockID, notifiedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscribersNotifiedAt indicates an expected call of UpdateSubscribersNotifiedAt.
func (mr *MockStoreMockRecorder) UpdateSubscribersNotifiedAt(blockID, notifiedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscribersNotifiedAt", reflect.TypeOf((*MockStore)(nil).UpdateSubscribersNotifiedAt), blockID, notifiedAt)
}

// UpsertNotificationHint mocks base method.
func (m *MockStore) UpsertNotificationHint(hint *model.NotificationHint, notificationFreq time.Duration) (*model.NotificationHint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNotificationHint", hint, notificationFreq)
	ret0, _ := ret[0].(*model.NotificationHint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertNotificationHint indicates an expected call of UpsertNotificationHint.
func (mr *MockStoreMockRecorder) UpsertNotificationHint(hint, notificationFreq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNotificationHint", reflect.TypeOf((*MockStore)(nil).UpsertNotificationHint), hint, notificationFreq)
}

// UpsertSharing mocks base method.
func (m *MockStore) UpsertSharing(sharing model.Sharing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSharing", sharing)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSharing indicates an expected call of UpsertSharing.
func (mr *MockStoreMockRecorder) UpsertSharing(sharing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSharing", reflect.TypeOf((*MockStore)(nil).UpsertSharing), sharing)
}

// UpsertTeamSettings mocks base method.
func (m *MockStore) UpsertTeamSettings(team model.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTeamSettings", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTeamSettings indicates an expected call of UpsertTeamSettings.
func (mr *MockStoreMockRecorder) UpsertTeamSettings(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTeamSettings", reflect.TypeOf((*MockStore)(nil).UpsertTeamSettings), team)
}

// UpsertTeamSignupToken mocks base method.
func (m *MockStore) UpsertTeamSignupToken(team model.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTeamSignupToken", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTeamSignupToken indicates an expected call of UpsertTeamSignupToken.
func (mr *MockStoreMockRecorder) UpsertTeamSignupToken(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTeamSignupToken", reflect.TypeOf((*MockStore)(nil).UpsertTeamSignupToken), team)
}
